export const promptHints = [
  "Focus on graph-related problems such as BFS, DFS, or shortest path.",
  "Generate a problem involving sliding window techniques.",
  "Make the problem revolve around two pointers or fast/slow pointer approaches.",
  "Use recursion and backtracking in the solution.",
  "Create a problem requiring dynamic programming to solve efficiently.",
  "Incorporate prefix sums or difference arrays into the problem.",
  "Base the problem on hash maps or frequency counting.",
  "Create a sorting-related problem with custom comparator logic.",
  "Use binary search either on arrays or on the answer space.",
  "Involve greedy strategies where local choices lead to global solutions.",
  "Generate a problem based on bit manipulation or bitmasking.",
  "Use stacks or monotonic stacks to solve the problem.",
  "Design a problem that involves heaps (priority queues).",
  "Build a problem involving disjoint set union (Union Find).",
  "Create a problem based on Trie data structures.",
  "Focus on interval merging or meeting room problems.",
  "Generate a problem involving linked list manipulations.",
  "Use queue or deque in the solution (e.g. sliding window maximum).",
  "Create a problem where modular arithmetic or large number handling is key.",
  "Include matrix traversal or grid-based problem-solving.",
  "Use recursion with memoization (top-down DP).",
  "Use tabulation (bottom-up DP) to solve the problem.",
  "Include tree traversals (inorder, preorder, postorder).",
  "Make the problem focus on LCA (Lowest Common Ancestor) or tree DP.",
  "Design a problem that involves parsing or evaluating simple math expressions using stacks.",
  "Include palindrome detection or longest palindromic subsequence/substring.",
  "Focus on subset generation or combinatorial logic.",
  "Use maps or sets to handle uniqueness or frequency problems.",
  "Base the problem on number theory or GCD/LCM.",
  "Create a problem involving prime numbers and the Sieve of Eratosthenes.",
  "Use flood fill or connected components in a matrix.",
  "Create a shortest path problem using Dijkstraâ€™s algorithm.",
  "Create a topological sorting problem involving course prerequisites.",
  "Make a problem based on segment trees or Fenwick trees (BIT).",
  "Use rolling hash or Rabin-Karp-style substring matching.",
  "Focus on a problem that requires minimizing or maximizing cost using DP or greedy.",
  "Create a problem that requires state-based BFS (multi-source BFS).",
  "Use binary indexed trees to solve a range update/query problem.",
  "Use union-find to detect cycles or connected components.",
  "Involve multi-source Dijkstra or A* pathfinding algorithms.",
  "Focus on scheduling tasks using greedy or heap-based methods.",
  "Design a problem that deals with string matching (KMP or Z-algorithm).",
  "Use circular array tricks or wrap-around conditions.",
  "Involve tree diameter or center finding."
];
